services:
  # zoo1:
  #   image: bitnami/zookeeper:latest
  #   container_name: zk1
  #   restart: always
  #   hostname: zoo1
  #   ports:
  #     - '2181'
  #     - '2888'
  #     - '3888'
  #   environment:
  #     - ZOO_SERVER_ID=1
  #     - ZOO_SERVERS=0.0.0.0:2888:3888,zoo2:2888:3888,zoo3:2888:3888
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   volumes:
  #     - zoo1_data:/data
  #     - zoo1_datalog:/datalog
  #   networks:
  #     - app_network

  # zoo2:
  #   image: bitnami/zookeeper:latest
  #   container_name: zk2
  #   restart: always
  #   hostname: zoo2
  #   ports:
  #     - '2181'
  #     - '2888'
  #     - '3888'
  #   environment:
  #     - ZOO_SERVER_ID=2
  #     - ZOO_SERVERS=zoo1:2888:3888,0.0.0.0:2888:3888,zoo3:2888:3888
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   volumes:
  #     - zoo2_data:/data
  #     - zoo2_datalog:/datalog
  #   networks: 
  #     - app_network

  # zoo3:
  #   image: bitnami/zookeeper:latest
  #   container_name: zk3
  #   restart: always
  #   hostname: zoo3
  #   ports:
  #     - '2181'
  #     - '2888'
  #     - '3888'
  #   environment:
  #     - ZOO_SERVER_ID=3
  #     - ZOO_SERVERS=zoo1:2888:3888,zoo2:2888:3888,0.0.0.0:2888:3888
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   volumes:
  #     - zoo3_data:/data
  #     - zoo3_datalog:/datalog
  #   networks: 
  #     - app_network



  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-12345
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka1_data:/bitnami/kafka
    networks:
      - app_network

  kafka2:
    image: bitnami/kafka:latest
    container_name: kafka2
    ports:
      - "9093:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-12345
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka2_data:/bitnami/kafka
    networks:
      - app_network

  kafka3:
    image: bitnami/kafka:latest
    container_name: kafka3
    ports:
      - "9094:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-12345
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka3_data:/bitnami/kafka
    networks:
      - app_network

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka1
    environment:
      - KAFKA_BROKERCONNECT=kafka1:9092
    ports:
      - "9000:9000"
    networks:
      - app_network



  # kafka:
  #   image: bitnami/kafka:3.3.1
  #   container_name: kafka
  #   restart: always
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_CFG_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
  #     KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
  #     KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #     ALLOW_PLAINTEXT_LISTENER: "yes"
  #     KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
  #   networks:
  #     - app_network
  #   depends_on:
  #     - zoo1
  #     - zoo2
  #     - zoo3

  # kafdrop:
  #   image: obsidiandynamics/kafdrop:latest
  #   container_name: kafdrop
  #   depends_on:
  #     - kafka
  #   environment:
  #     KAFKA_BROKERCONNECT: kafka:9092
  #   ports:
  #     - "9000:9000"
  #   networks:
  #     - app_network



  db:
    image: postgres:14
    container_name: postgresql
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - app_network



  web:
    build: ./ufanet
    container_name: django
    command: python manage.py runserver 0.0.0.0:8000
    env_file: .env
    volumes:
      - ./ufanet:/app
      - ./ufanet/media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - app_network



  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "5050:80"
    env_file: .env
    networks:
      - app_network


volumes:
  postgres_data:

  kafka1_data:
  kafka2_data:
  kafka3_data:

  #zoo1_data:
  #zoo1_datalog:
  #zoo2_data:
  #zoo2_datalog:
  #zoo3_data:
  #zoo3_datalog:

networks:
  app_network:
